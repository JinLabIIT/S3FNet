.. _s3f-synchronization:

More on Synchronziation in S3F
===============================

S3F supports the following conservative synchronization mechanisms:

* Barrier-based synchronization (synchronous) 
* Channel-scanning-based synchronization using appointment (asynchronous)
* Composite synchronization

Barrier-Type Synchronization
*****************************

Figure :ref:`sync1` shows the barrier synchronization in S3F. When all timelines reaches the current barrier, S3F computes the next barrier: a lower bound of the earliest time that an event generated by a timeline might affect other timeline. All timelines can independently advance the simulation up to the next barrier.

.. _sync1:
.. figure::  images/sync1.png
   :width: 40 %
   :align:   center
   
   Barrier-Based Synchronization

Appointment-based Synchronization
**********************************

A timeline decides how far to advance the simulation based on other *connected* timelines. S3F uses *pair-wise* appointment to synchronize timelines. Suppose that an OutChannel of Timeline 0 connects to an InChannel of Timeline 1. Let us call Timeline 0 “sender” timeline and Timeline 1 “receiver” timeline. 

A sender makes/updates appointments on both parties. When a sender reaches an appointment time, it computes the next appointment (the lower bound of the earliest time that an event might be sent to the receiver) and continue to advance without waiting for the receiver. When the receiver arrives at the appointment earlier than the sender, the receiver must wait for the sender to reach the appointment; otherwise, the receiver will take the most recent appointment from the sender as its next appointment. The appointment protocol is illustrated in Figure :ref:`sync2`.

.. _sync2:
.. figure::  images/sync2.png
   :width: 50 %
   :align:   center
   
   Appointment-Based Asynchronous Synchronization

For more complicated simulation scenarios, each pair of sender timeline and receiver timeline follows the same protocol. The performance is highly dependent on the number of connected cross-timeline channels.

Composite Synchronization
***************************

S3F implements the composite synchronization described in the paper "`Composite synchronization in parallel discrete-event simulation <http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1003854&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1003854>`_." All cross-timeline channels are classified into two categories. The channels whose lookahead is less than the threshold are classified as asynchronous channels, and the rest are classified as synchronous channels (refer to Timeline::initialize_appt).

S3F allows users to divide the entire simulation into simulation **epochs**. At the end of one such, control is released from the simulation threads to allow other activities, such as recalculation of received radio strength maps and location of mobile devices. Within an epoch, barrier synchronization is used for synchronous channels. The time between two consecutive synchronization barriers is called **synchronization window**. Within a synchronization window, appointment protocol is used for asynchronous channels. Figure :ref:`sync3` illustrates the composite synchronization with a 3-timeline example. An arrow “Timeline X => Timeline Y” means that Timeline Y gets cross-timeline events from Timeline X at Timeline Y’s virtual clock.


.. _sync3:
.. figure::  images/sync3.png
   :width: 50 %
   :align:   center
  
   Composite Synchronization in S3F


Figure :ref:`sync4` depicts the implementation of synchronization mechanisms in S3F. Three barriers are created in Interface::Interface():

* windows_barrier (simulation threads + the control thread)

  It is used twice during an epoch. In the first time, it is used to gather all the simulation threads together and then start to do the first synchronization window. In the second time, it is used to prevent thread exceeding the epoch.

* bottom barrier (simulation threads)

  It is used to calculate the size of the next synchronization window.

* top barrier (simulation threads)

  It is used to ensure that no simulation threads can go beyond the current synchronization window.

Between top_barrier and bottom_barrier, timelines exchange their cross-timeline events. Within a synchronize window, the appointment protocol is used to synchronize those asynchronous channels. The simulation epoch is implemented in “Timeline::thread_function()”, and the synchronize window is implemented in “Timeline::sync_window()”.

.. _sync4:
.. figure::  images/sync4.png
   :width: 30 %
   :align:   center
 
   Implementation of Synchronization in S3F


